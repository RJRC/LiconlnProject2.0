//------------------------------------------------------------------------------
// <auto-generated>
//     Este código se generó a partir de una plantilla.
//
//     Los cambios manuales en este archivo pueden causar un comportamiento inesperado de la aplicación.
//     Los cambios manuales en este archivo se sobrescribirán si se regenera el código.
// </auto-generated>
//------------------------------------------------------------------------------

namespace Entities
{
    using System;
    using System.Data.Entity;
    using System.Data.Entity.Infrastructure;
    using System.Data.Entity.Core.Objects;
    using System.Linq;
    
    public partial class LincolnDBEntities : DbContext
    {
        public LincolnDBEntities()
            : base("name=LincolnDBEntities")
        {
        }
    
        protected override void OnModelCreating(DbModelBuilder modelBuilder)
        {
            throw new UnintentionalCodeFirstException();
        }
    
        public virtual DbSet<Carry> Carry { get; set; }
        public virtual DbSet<Client> Client { get; set; }
        public virtual DbSet<Connotary> Connotary { get; set; }
        public virtual DbSet<Login> Login { get; set; }
        public virtual DbSet<Notary> Notary { get; set; }
        public virtual DbSet<Protocol> Protocol { get; set; }
        public virtual DbSet<Writing> Writing { get; set; }
    
        public virtual int proc_Create_Notary(string name, string enabled, string availability)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var enabledParameter = enabled != null ?
                new ObjectParameter("enabled", enabled) :
                new ObjectParameter("enabled", typeof(string));
    
            var availabilityParameter = availability != null ?
                new ObjectParameter("availability", availability) :
                new ObjectParameter("availability", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Create_Notary", nameParameter, enabledParameter, availabilityParameter);
        }
    
        public virtual ObjectResult<proc_Get_Notaries_Result> proc_Get_Notaries()
        {
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction<proc_Get_Notaries_Result>("proc_Get_Notaries");
        }
    
        public virtual int proc_Insert_UserLogin(string username, string password, string type)
        {
            var usernameParameter = username != null ?
                new ObjectParameter("username", username) :
                new ObjectParameter("username", typeof(string));
    
            var passwordParameter = password != null ?
                new ObjectParameter("password", password) :
                new ObjectParameter("password", typeof(string));
    
            var typeParameter = type != null ?
                new ObjectParameter("type", type) :
                new ObjectParameter("type", typeof(string));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Insert_UserLogin", usernameParameter, passwordParameter, typeParameter);
        }
    
        public virtual int proc_Update_Notary(string name, string enabled, string availability, Nullable<int> id)
        {
            var nameParameter = name != null ?
                new ObjectParameter("name", name) :
                new ObjectParameter("name", typeof(string));
    
            var enabledParameter = enabled != null ?
                new ObjectParameter("enabled", enabled) :
                new ObjectParameter("enabled", typeof(string));
    
            var availabilityParameter = availability != null ?
                new ObjectParameter("availability", availability) :
                new ObjectParameter("availability", typeof(string));
    
            var idParameter = id.HasValue ?
                new ObjectParameter("id", id) :
                new ObjectParameter("id", typeof(int));
    
            return ((IObjectContextAdapter)this).ObjectContext.ExecuteFunction("proc_Update_Notary", nameParameter, enabledParameter, availabilityParameter, idParameter);
        }
    }
}
